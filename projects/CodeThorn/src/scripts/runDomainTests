#!/bin/bash

# test 1-9: normalization: YES
# test 10:  normalization: NO

red=$'\e[1;31m'
grn=$'\e[1;32m'
yel=$'\e[1;33m'
blu=$'\e[1;34m'
mag=$'\e[1;35m'
cyn=$'\e[1;36m'
end=$'\e[0m'

COLORED_FAIL=${red}FAIL${end}
COLORED_WARN=${yel}WARN${end}
COLORED_PASS=${grn}PASS${end}

TESTDIR=$1
echo "------------------------------------------------"
echo "running DOMAIN TESTS"
echo "------------------------------------------------"

BENCH_PASS=0
BENCH_FAIL=0

function DomainTests {
testNumbers=`echo {001..029}`
echo "Scheduled tests: $testNumbers"
for testNumber in $testNumbers; do
    benchmarkprefix=$TESTDIR/DOM${testNumber};
    for benchmark in ${benchmarkprefix}*.[Cc]; do
        benchmarkname=$(basename $benchmark)
        printf "Testing %-35s: " $benchmarkname
        CT_OUTPUT_FILE=$benchmarkname.imout
        ./codethorn $benchmark --normalize-all=yes --interpreter-mode=1 --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR > /dev/null
        if [ ! $? -eq 0 ]
        then
	    echo $COLORED_FAIL
            exit 1
        else
            echo -n "$COLORED_PASS "
            EXEFILE=${benchmarkname}.exe
            g++ $benchmark -o$EXEFILE -I $TESTDIR 
            GCC_OUTPUT_FILE="${CT_OUTPUT_FILE}.check"
            if [ -f $TESTDIR/${benchmarkname}.testinput ]; then
                # run with test input from file
                ./$EXEFILE > $GCC_OUTPUT_FILE < $TESTDIR/${benchmarkname}.testinput
            else
                ./$EXEFILE > $GCC_OUTPUT_FILE
            fi
            DIFF=$(diff $GCC_OUTPUT_FILE $CT_OUTPUT_FILE) 
            if [ "$DIFF" != "" ] 
            then
                echo $COLORED_WARN
#                echo "Diff: $DIFF"
            else
                echo $COLORED_PASS
            fi
        fi
    done
done
}

DomainTests

rm -f rose_normalization*.C
rm -f a.out

