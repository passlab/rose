// This string (-*- c++ -*-) is to make XEmacs C-aware tools available automatically since this file's name and contents don't
// obviously imply C++.

// This implements the support within ROSE for memory pools.  Memory pools
// support the most condensed usage of memory within the construction of
// and AST. Large blocks of contiguous storage for each RI node is allocated
// by a new operator written for each class.

#if defined(_REENTRANT) && defined(HAVE_PTHREAD_H)
    // User wants multi-thread support and POSIX threads are available.
#   include <pthread.h>
    static pthread_mutex_t $CLASSNAME_allocation_mutex = PTHREAD_MUTEX_INITIALIZER;
#else
     // Cause synchronization to be skipped.
#    ifndef ALLOC_MUTEX
#        define ALLOC_MUTEX(CLASS_NAME, HOW)
#    endif
#    ifdef _REENTRANT
        // User wnats multi-thread support, but POSIX is unavailable. Consider using Boost Threads which are more portable.
#       ifdef _MSC_VER
#           pragma message("POSIX threads are not available; synchronization being skipped")
#       else
#           warning "POSIX threads are not available; synchronization being skipped"
#       endif
#    endif
#endif

// Static variables supporting memory pools
// Is there some reason these are global variables rather than class variables? [RPM 2011-01-27]
int  $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE = DEFAULT_CLASS_ALLOCATION_POOL_SIZE;
$CLASSNAME* $CLASSNAME_Current_Link        = NULL;

// This macro protects allocation functions by locking/unlocking a mutex. We have one mutex defined for each Sage class. The
// HOW argument should be the word "lock" or "unlock".  Using a macro allows us to not have to use conditional compilation
// every time we access a mutex (in the case where mutexes aren't defined on one OS, we can place the conditional compilation
// around this macro definition rather than each use).
#ifndef ALLOC_MUTEX
#   define ALLOC_MUTEX(CLASS_NAME, HOW)                                          \
        do {                                                                     \
            if (pthread_mutex_##HOW(&CLASS_NAME##_allocation_mutex)) {           \
                fprintf(stderr, "%s mutex %s failed\n", #CLASS_NAME, #HOW);      \
                abort();                                                         \
            }                                                                    \
        } while (0);
#endif

#if 0
// DQ (12/15/2005): Removed in favor of Jochen's implementation using STL.
int $CLASSNAME::Memory_Block_Index          = 0;
const int $CLASSNAME::Max_Number_Of_Memory_Blocks = MAX_NUMBER_OF_MEMORY_BLOCKS;
unsigned char *$CLASSNAME::Memory_Block_List [MAX_NUMBER_OF_MEMORY_BLOCKS];
#endif

// JH (30/11/2005): Initializing the static STL vector, containing the pointers
// to the memory block of a pool
std::vector<unsigned char*> $CLASSNAME_Memory_Block_List;

// DQ (11/1/2016): This is redundant and repeated hundreds to times which is misleading.
// This macro appears to be set within code within ROSETTA, but only for when _MSC_VER is true.
#define USE_CPP_NEW_DELETE_OPERATORS FALSE
// #define USE_CPP_NEW_DELETE_OPERATORS TRUE

/*! \brief New operator for $CLASSNAME.

   This new operator implements memory pools to provide most efficent 
   use of the heap within construction of large ASTs.

\internal The new and delete operators use the lower level C malloc/free
   function calls for performance and to make sure that mixing of malloc/free
   and new/delete by the used can be caught more readily.  This may change
   in the future.  ROSE_MALLOC macro is used to permit memory allocation to
   be alligned on page boundaries.  ROSE_FREE is whatever it takes to 
   deallocate memory allocated using ROSE_MALLOC.
*/
void *$CLASSNAME::operator new ( size_t Size )
{
    /* This entire function is protected by a mutex.  To avoid deadlock, be sure to unlock the mutex before
     * returning or throwing an exception. */
    ALLOC_MUTEX($CLASSNAME, lock);

#if ROSE_ALLOC_TRACE
    printf("$CLASSNAME::new (IN)\n  current_link = %p\n", $CLASSNAME_Current_Link);
#endif

#if USE_CPP_NEW_DELETE_OPERATORS
    void *mem = ROSE_MALLOC(Size);
    ALLOC_MUTEX($CLASSNAME, unlock);
    return mem;
#else /* !USE_CPP_NEW_DELETE_OPERATORS... */
#if ROSE_ALLOC_AUTH_ALT_SIZE
    if (Size != sizeof($CLASSNAME)) {
      void * object = ROSE_MALLOC(Size);
      ALLOC_MUTEX($CLASSNAME, unlock);
      return object;
    }
#else
    ROSE_ASSERT(Size == sizeof($CLASSNAME));
#endif

    if ($CLASSNAME_Current_Link == NULL) {
        $CLASSNAME * alloc = ($CLASSNAME*) ROSE_MALLOC ( $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE * sizeof($CLASSNAME) );
        ROSE_ASSERT(alloc != NULL);

#if ROSE_ALLOC_TRACE
        printf("$CLASSNAME::alloc\n  block[%zi] = [ %p , %p [\n", $CLASSNAME_Memory_Block_List.size(), alloc, alloc + $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE);
#endif

#if ROSE_ALLOC_MEMSET == 1
        memset(alloc, 0x00, $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE * sizeof($CLASSNAME));
#elif ROSE_ALLOC_MEMSET == 2
        memset(alloc, 0xAA, $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE * sizeof($CLASSNAME));
#endif
        for (int i=0; i < $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE-1; i++) {
          alloc[i].p_freepointer = &(alloc[i+1]);
        }
        alloc[$CLASSNAME_CLASS_ALLOCATION_POOL_SIZE-1].p_freepointer = NULL;

        $CLASSNAME_Memory_Block_List.push_back ( (unsigned char *) alloc );
        $CLASSNAME_Current_Link = alloc;
    }
    ROSE_ASSERT($CLASSNAME_Current_Link != NULL);

    $CLASSNAME * object = $CLASSNAME_Current_Link;
    $CLASSNAME_Current_Link = ($CLASSNAME*)(object->p_freepointer);

#if ROSE_ALLOC_MEMSET == 1
    memset(object, 0x00, sizeof($CLASSNAME));
#elif ROSE_ALLOC_MEMSET == 2
    memset(object, 0xBB, sizeof($CLASSNAME));
#endif

    object->p_freepointer = AST_FileIO::IS_VALID_POINTER();

#if ROSE_ALLOC_TRACE
    printf("$CLASSNAME::new (OUT)\n  object = %p\n    ->freepointer = %p\n    ->parent = %p\n  current_link = %p\n", object, object->p_freepointer, object->p_parent, $CLASSNAME_Current_Link);
#endif

    ALLOC_MUTEX($CLASSNAME, unlock);

    return object;
#endif /* USE_CPP_NEW_DELETE_OPERATORS */
}



/*! \brief Delete operator for $CLASSNAME.

   This delete operator implements deallocation using memory pools to 
   provide most efficent use of the heap within construction of large ASTs.

\internal The new and delete operators use the lower level C malloc/free
   function calls for performance and to make sure that mixing of malloc/free
   and new/delete by the used can be caught more readily.  This may change
   in the future.  ROSE_MALLOC macro is used to permit memory allocation to
   be alligned on page boundaries.  ROSE_FREE is whatever it takes to 
   deallocate memory allocated using ROSE_MALLOC.
*/
void $CLASSNAME::operator delete(void *Pointer, size_t Size)
{
    /* Entire function is protected by a mutex. To prevent deadlock, be sure to unlock this mutex before returning
     * or throwing an exception. */
    ALLOC_MUTEX($CLASSNAME, lock);

#if USE_CPP_NEW_DELETE_OPERATORS
    ROSE_FREE(Pointer);
#else
#if ROSE_ALLOC_AUTH_ALT_SIZE
    if (Size != sizeof($CLASSNAME)) {
      ROSE_FREE(Pointer);
      ALLOC_MUTEX($CLASSNAME, unlock);
      return;
    }
#else
    ROSE_ASSERT(Size == sizeof($CLASSNAME));
#endif

    $CLASSNAME * object = ($CLASSNAME*) Pointer;
    ROSE_ASSERT(object != NULL);

#if ROSE_ALLOC_TRACE
    printf("$CLASSNAME::delete (IN)\n  object = %p\n    ->freepointer = %p\n    ->parent = %p\n  current_link = %p\n", object, object->p_freepointer, object->p_parent, $CLASSNAME_Current_Link);
#endif

#if ROSE_DEALLOC_ASSERT == 1
    ROSE_ASSERT(object->p_freepointer == AST_FileIO::IS_VALID_POINTER());
#endif

#if ROSE_ALLOC_MEMSET == 1
    memset(object, 0x00, sizeof($CLASSNAME));
#elif ROSE_ALLOC_MEMSET == 2
    memset(object, 0xDD, sizeof($CLASSNAME));
#endif

// Liao, 8/11/2014, to support IR mapping, we need unique IDs for AST nodes.
// We provide a mode in which memory space will not be reused later so we can easily generate unique IDs based on memory addresses.
#ifdef ROSE_USE_MEMORY_POOL_NO_REUSE
    object->p_freepointer = NULL;   // clear IS_VALID_POINTER flag, but not putting it back to the memory pool.
#else
    object->p_freepointer = $CLASSNAME_Current_Link;
    $CLASSNAME_Current_Link = object;
#endif

#if ROSE_ALLOC_TRACE
    printf("$CLASSNAME::delete (OUT)\n  object = %p\n    ->freepointer = %p\n    ->parent = %p\n  current_link = %p\n", object, object->p_freepointer, object->p_parent, $CLASSNAME_Current_Link);
#endif

#endif /* USE_CPP_NEW_DELETE_OPERATORS */

    ALLOC_MUTEX($CLASSNAME, unlock);
}

// DQ (11/27/2009): I have moved this member function definition to outside of the
// class declaration to make Cxx_Grammar.h smaller, easier, and faster to parse.
// This is part of work to reduce the size of the Cxx_Grammar.h file for MSVS. 
// DQ (4/5/2007): This is not the correct operator that we want, but appears to be required to compile ROSE with ROSE.
// Also, note comment below from Robb (copied from the Common.code file).
/* RPM (2009-06-03): Apparently this must all be on one line for configuration "--with-javaport"; reverting r5427 */
//
// Matzke (2018-02-16): We don't need to provide both operator delete(void*) and operator delete(void*,size_t) because the C++
// runtime calls exactly one of them (whichever is defined). Futhermore, the Boost serialization library assumes that classes
// don't provide both versions at once (doing so causes compile errors in boost header files that try to invoke the
// destructor).  Therefore, I'm commenting out operator delete(void*). See [http://en.cppreference.com/w/cpp/language/delete].
#if 0
void $CLASSNAME::operator delete(void* pointer) { $CLASSNAME::operator delete (pointer, sizeof($CLASSNAME)); };
#endif
