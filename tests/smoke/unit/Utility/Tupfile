include_rules
ifeq (@(ENABLE_TESTS),yes)

###############################################################################################################################
# AstAttributeMechanism
###############################################################################################################################

run $(tool_compile_linkexe) attributeTests.C
run $(test) attributeTests

###############################################################################################################################
# Tests that diagnostics are working
###############################################################################################################################

run $(tool_compile_linkexe) testDiagnostics.C
run $(test) testDiagnostics

###############################################################################################################################
# Tests the StringUtility functions
###############################################################################################################################

run $(tool_compile_linkexe) testStringUtility.C
run $(test) testStringUtility

###############################################################################################################################
# Tests for parallel sorting
###############################################################################################################################

run $(tool_compile_linkexe) testSort.C
run $(test) testSort

###############################################################################################################################
# tests for the built-in SHA-256 algorithm
###############################################################################################################################

# To generate a new answer file, run these commands:
#     rm -f x-????????.dat
#     ./testSha256Builtin -ox 0 9399
#     for f in x-????????.dat; do sha256sum $f |cut -d' ' -f1; done >testSha256Builtin.ans
#     rm -f x-????????.dat
#
# 9399 is magic -- it's a buffer size that caused a buffer overflow in the first implementation.

run $(tool_compile_linkexe) testSha256Builtin.C
run $(test) testSha256Builtin --answer=testSha256Builtin.ans \
    ./testSha256Builtin 0 9399

###############################################################################################################################
# tests the RangeMap class
###############################################################################################################################

run $(tool_compile_linkexe) rangeMapTests.C
run $(test) rangeMapTests --answer=rangeMapTests.ans

run $(tool_compile_linkexe) testRangeMap.C
run $(test) testRangeMap

########################################################################################################################
# Source location
########################################################################################################################

run $(tool_compile_linkexe) testSourceLocation.C
run $(test) testSourceLocation

endif
