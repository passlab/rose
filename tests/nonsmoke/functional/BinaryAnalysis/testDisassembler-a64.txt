# abs d2, d1
0x22 0xb8 0xe0 0x5e

# adc w3, w2, w1
0x43 0x00 0x01 0x1a

# adc x3, x2, x1
0x43 0x00 0x01 0x9a

# adcs w3, w2, w1
0x43 0x00 0x01 0x3a

# adcs x3, x2, x1
0x43 0x00 0x01 0xba

# add w3, w2, w1, uxtb #2
0x43 0x08 0x21 0x0b

# add x3, x2, w1, uxtb #2
0x43 0x08 0x21 0x8b

# add x3, x2, x1, sxtx #2
0x43 0xe8 0x21 0x8b

# add sp, x2, x1, sxtx #2
0x5f 0xe8 0x21 0x8b

# add w2, w1, #0xfff
0x22 0xfc 0x3f 0x11

# add x2, x1, #0xfff
0x22 0xfc 0x3f 0x91

# add w2, w1, #0xfff, lsl #12
0x22 0xfc 0x7f 0x11

# add w3, w2, w1, lsl #31
0x43 0x7c 0x01 0x0b

# add x3, x2, x1, lsl #63
0x43 0xfc 0x01 0x8b

# add d3, d2, d1
0x43 0x84 0xe1 0x5e

# add v3.2d, v2.2d, v1.2d
0x43 0x84 0xe1 0x4e

# add v3.4s, v2.4s, v1.4s
0x43 0x84 0xa1 0x4e

# add v3.2d, v2.2d, v1.2d
0x43 0x84 0xe1 0x4e

# add v3.8b, v2.8b, v1.8b
0x43 0x84 0x21 0x0e

# add v3.4h, v2.4h, v1.4h
0x43 0x84 0x61 0x0e

# add v3.2s, v2.2s, v1.2s
0x43 0x84 0xa1 0x0e

# addg x2, x1, #16, #0
# only valid for ARMv8.5 and later
# 0x22 0x00 0x81 0x91

# addhn v3.8b, v2.8h, v1.8h
0x43 0x40 0x21 0x0e

# addhn v3.4h, v2.4s, v1.4s
0x43 0x40 0x61 0x0e

# addhn v3.2s, v2.2d, v1.2d
0x43 0x40 0xa1 0x0e

# addhn2 v3.16b, v2.8h, v1.8h
0x43 0x40 0x21 0x4e

# addhn2 v3.8h, v2.4s, v1.4s
0x43 0x40 0x61 0x4e

# addhn2 v3.4s, v2.2d, v1.2d
0x43 0x40 0xa1 0x4e

# addp d2, v1.2d
0x22 0xb8 0xf1 0x5e

# addp v3.8b, v2.8b, v1.8b
0x43 0xbc 0x21 0x0e

# addp v3.4h, v2.4h, v1.4h
0x43 0xbc 0x61 0x0e

# addp v3.2s, v2.2s, v1.2s
0x43 0xbc 0xa1 0x0e

# addp v3.16b, v2.16b, v1.16b
0x43 0xbc 0x21 0x4e

# addp v3.8h, v2.8h, v1.8h
0x43 0xbc 0x61 0x4e

# addp v3.4s, v2.4s, v1.4s
0x43 0xbc 0xa1 0x4e

# addp v3.2d, v2.2d, v1.2d
0x43 0xbc 0xe1 0x4e

# adds w3, w2, w1, uxtb #4
0x43 0x10 0x21 0x2b

# adds x3, x2, w1, uxtb #4
0x43 0x10 0x21 0xab

# adds w2, w1, #0xfff, lsl #12
0x22 0xfc 0x7f 0x31

# adds x2, x1, #0xfff, lsl #12
0x22 0xfc 0x7f 0xb1

# adds w3, w2, w1, asr #31
0x43 0x7c 0x81 0x2b

# adds x3, x2, x1, asr #63
0x43 0xfc 0x81 0xab

# addv b2, v1.8b
0x22 0xb8 0x31 0x0e

# addv h2, v1.4h
0x22 0xb8 0x71 0x0e

# addv b2, v1.16b
0x22 0xb8 0x31 0x4e

# addv h2, v1.8h
0x22 0xb8 0x71 0x4e

# addv s2, v1.4s
0x22 0xb8 0xb1 0x4e

# adr x1, #0xffffffffffffffff
0xe1 0xff 0xff 0x70

# adrp x1, #0xfffffffffffff000
0xe1 0xff 0xff 0xf0

# aesd v2.16b, v1.16b
0x22 0x58 0x28 0x4e

# aese v2.16b, v1.16b
0x22 0x48 0x28 0x4e

# aesimc v2.16b, v1.16b
0x22 0x78 0x28 0x4e

# aesmc v2.16b, v1.16b
0x22 0x68 0x28 0x4e

# and v3.8b, v2.8b, v1.8b
0x43 0x1c 0x21 0x0e

# and v3.16b, v2.16b, v1.16b
0x43 0x1c 0x21 0x4e

# and w2, w1, #1
0x22 0x00 0x00 0x12

# and x2, x1, #0x100000001
0x22 0x00 0x00 0x92

# and w3, w2, w1, asr #31
0x43 0x7c 0x81 0x0a

# and x3, x2, x1, asr #63
0x43 0xfc 0x81 0x8a

# ands w2, w1, #1
0x22 0x00 0x00 0x72

# ands x2, x1, #0x100000001
0x22 0x00 0x00 0xf2

# ands w3, w2, w1, lsl #31
0x43 0x7c 0x01 0x6a

# ands x3, x2, x1, lsl #63
0x43 0xfc 0x01 0xea

# asr w3, w2, w1
0x43 0x28 0xc1 0x1a

# asr x3, x2, x1
0x43 0x28 0xc1 0x9a

# asr w2, w1, #0xf
0x22 0x7c 0x0f 0x13

# asr x2, x1, #0x3f
0x22 0xfc 0x7f 0x93

# at s1e1r, x1
0x01 0x78 0x08 0xd5

# autda x2, x1
# only for ARMv8p3
# 0x22 0x18 0xc1 0xda

# autdza x1
# only for ARMv8p3
#0xe2 0x3b 0xc1 0xda

# autdb x2, sp
# only for ARMv8p3
#0xe2 0x1f 0xc1 0xda

# autdzb x2
# only for ARMv8p3
#0xe2 0x3f 0xc1 0xda

# autia...
# only for ARMv8p3

# autia1716...
# only for ARMv8p3

# autiasp...
# only for ARMv8p3

# autiaz...
# only for ARMv8p3

# autiza...
# only for ARMv8p3

# autib...
# only for ARMv8p3

# autib1716...
# only for ARMv8p3

# autibsp...
# only for ARMv8p3

# autibz...
# only for ARMv8p3

# autizb...
# only for ARMv8p3

# AXFlag
# internal version only
# 0x5f 0x40 0x00 0xd5

# b.eq #0xfffffffffffffffc
0xe0 0xff 0xff 0x54

# b.ne #0xfffffffffffffffc
0xe1 0xff 0xff 0x54

# b.hs #0xfffffffffffffffc
0xe2 0xff 0xff 0x54

# b.lo #0xfffffffffffffffc
0xe3 0xff 0xff 0x54

# b.mi #0xfffffffffffffffc
0xe4 0xff 0xff 0x54

# b.pl #0xfffffffffffffffc
0xe5 0xff 0xff 0x54

# b.vs #0xfffffffffffffffc
0xe6 0xff 0xff 0x54

# b.vc #0xfffffffffffffffc
0xe7 0xff 0xff 0x54

# b.hi #0xfffffffffffffffc
0xe8 0xff 0xff 0x54

# b.ls #0xfffffffffffffffc
0xe9 0xff 0xff 0x54

# b.ge #0xfffffffffffffffc
0xea 0xff 0xff 0x54

# b.lt #0xfffffffffffffffc
0xeb 0xff 0xff 0x54

# b.gt #0xfffffffffffffffc
0xec 0xff 0xff 0x54

# b.le #0xfffffffffffffffc
0xed 0xff 0xff 0x54

# b.al #0xfffffffffffffffc
0xee 0xff 0xff 0x54

# b.nv #0xfffffffffffffffc
0xef 0xff 0xff 0x54

# b #0xfffffffffffffffc
0xff 0xff 0xff 0x17

# bcax...
# only for ARMv8.2-SHA
# 0x64 0x08 0x21 0xce

# bfxil w2, w1, #0, #1
0x22 0x00 0x00 0x33

# prfum plil2keep, [x13, #0xf4]
# This seems to be disassembled incorrecty by Capstone as far as I can
# tell. The returned instruction has only one operand, although
# Capstone itself prints both operands. Therfore ROSE is only able to
# build the first operand and reports just "prfum plil2keep".
0xaa 0x41 0x8f 0xf8

# mrs x23, s3_0_c15_c12_5
0xb7 0xfc 0x38 0xd5

# mrs x23, s2_0_c15_c12_5
# This seems to be disassembled incorrecty by Capstone. Capstone emits
# s3_0_c15_c12_5 instead of s2_0_c15_c12_5.
0xb7 0xfc 0x30 0xd5

# msr s3_2_c3_c8_1, x21
0x35 0x38 0x1a 0xd5

# ubfx w2, w1, #0, #1
0x22 0x00 0x00 0x53

# sys #6, c10, c1, #1, x13
0x2d 0xa1 0x0e 0xd5
